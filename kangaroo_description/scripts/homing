#!/usr/bin/env python
import rospy
import sys
from actionlib import SimpleActionClient
from play_motion_msgs.msg import PlayMotionAction, PlayMotionGoal, PlayMotionResult
from controller_manager_msgs.srv import ListControllers, SwitchController
from gazebo_msgs.msg import ModelState
from gazebo_msgs.srv import SetModelState
from tf.transformations import quaternion_from_euler

def homing():
    rospy.init_node('homing', anonymous=True)

    #0. retrieve controllers to use and robot name
    controllers_param = rospy.get_param('~controllers', "")
    if controllers_param == "":
        rospy.logerr("No parameter controllers specified, exiting!")
        exit()

    robot_name = rospy.get_param('~robot_name', "")
    if robot_name == "":
        rospy.logerr("No parameter robot_name specified, exiting!")
        exit()
    rospy.loginfo("executing homing procedure for {}".format(robot_name))

    running_controllers = dict()
    for controller in controllers_param:
        running_controllers[controller] = False

    #1. check play_motion server started
    client = SimpleActionClient('/play_motion', PlayMotionAction)
    rospy.loginfo("Waiting for server...")
    while not client.wait_for_server() and not rospy.is_shutdown():
        rospy.loginfo("still waiting...")
        rospy.sleep(1.0)
    rospy.loginfo("play_motion server connected!")

    #2. check controllers are running
    rospy.wait_for_service('/controller_manager/list_controllers')
    try:
        controller_list = rospy.ServiceProxy('/controller_manager/list_controllers', ListControllers)

        while not all(running is True for running in running_controllers.values()) and not rospy.is_shutdown():
            controllers = controller_list()
            for controller in controllers.controller:
                if controller.name in running_controllers.keys():
                    rospy.loginfo("controller {} is {}".format(controller.name, controller.state))
                    if controller.state == "running":
                        running_controllers[controller.name] = True
                    else:
                        rospy.logerr("Error while performing the homing. "
                            "Controller : {} is in {} state".format(controller.name, controller.state))
                        sys.exit(1)
                else:
                    rospy.loginfo(controller.name + " not requested")
    except rospy.ServiceException as e:
        rospy.logerr(e)

    #3. send motions
    rospy.sleep(0.1) # without this play_motion complains about no controllers found for certain joint even if controller is running...
    homing_result = False
    while not homing_result and not rospy.is_shutdown():
        goal = PlayMotionGoal()
        goal.motion_name = 'homing'
        goal.skip_planning = True

        client.send_goal(goal)
        client.wait_for_result()
        result = client.get_result()
        # Allow GOAL_NOT_REACHED as this is a common error and this means the gains needs to be tweaked a bit more
        if result.error_code == PlayMotionResult.SUCCEEDED or result.error_code == PlayMotionResult.GOAL_NOT_REACHED:
            homing_result = True
        else:
            rospy.loginfo("retrying the homing procedure...")
            rospy.sleep(0.2)


    rospy.loginfo("homing done!")
    #4. reset pose
    ft_sensors = rospy.get_param('~ft_sensors', False)
    if ft_sensors is True:
        rospy.loginfo("Robot equipped with F/T sensors") 
        position = rospy.get_param("~xyz", [0., 0., 1.0])
    else:
        position = rospy.get_param("~xyz", [0., 0., 0.94])

    orientation = rospy.get_param("~rpy", [0., 0., 0.])
    quat = quaternion_from_euler(orientation[0], orientation[1], orientation[2])
    rospy.loginfo("Spawning at position: " + ''.join(map(str, position)) + " [m] and orientation: " + ''.join(map(str, orientation)) + "[rad]")

    rospy.wait_for_service('gazebo/set_model_state')
    try:
        set_model_state = rospy.ServiceProxy('gazebo/set_model_state', SetModelState)
        gmsg = ModelState()
        gmsg.model_name = robot_name
        gmsg.pose.position.x = position[0]
        gmsg.pose.position.y = position[1]
        gmsg.pose.position.z = position[2]
        gmsg.pose.orientation.x = quat[0]
        gmsg.pose.orientation.y = quat[1]
        gmsg.pose.orientation.z = quat[2]
        gmsg.pose.orientation.w = quat[3]
        resp1 = set_model_state(gmsg)
        if not resp1:
            rospy.loginfo(resp1.status_message)
    except rospy.ServiceException as e:
        rospy.loginfo(e)
    rospy.loginfo("called set_model_state service")

    #5. stopping specified controllers
    rospy.wait_for_service('/controller_manager/switch_controller')
    try:
        switch_controller = rospy.ServiceProxy('/controller_manager/switch_controller', SwitchController)
        switch_controller([""], controllers_param, 1)
    except rospy.ServiceException as e:
        rospy.logerr(e)

    #6. exiting
    exit()


if __name__ == '__main__':
    try:
        homing()
    except rospy.ROSInterruptException:
        pass