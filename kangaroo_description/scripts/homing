#!/usr/bin/env python
import rospy
from std_msgs.msg import String
from play_motion_msgs.msg import PlayMotionActionGoal
from gazebo_msgs.msg import ModelState
from gazebo_msgs.srv import SetModelState
from tf.transformations import quaternion_from_euler

def homing():
    pub = rospy.Publisher('/play_motion/goal', PlayMotionActionGoal, queue_size=10)
    rospy.init_node('homing', anonymous=True)
    msg = PlayMotionActionGoal()
    msg.goal.motion_name = 'homing'
    msg.goal.skip_planning = True

    rate = rospy.Rate(10)  # 10hz
    published = False
    while not rospy.is_shutdown():
        if pub.get_num_connections() > 0:
            if not published:
                pub.publish(msg)
                published = True
                print("called homing motion")
                break
        rate.sleep()

    wait_for_homing = rospy.get_param("~wait_for_homing", 3.)
    print("Wait ", wait_for_homing, " [s] for homing before setting model state.")

    position = rospy.get_param("~xyz", [0., 0., 0.982])
    orientation = rospy.get_param("~rpy", [0., 0., 0.])
    quat = quaternion_from_euler(orientation[0], orientation[1], orientation[2])
    print("Spawning at position: ", position, " [m] and orientation: ", orientation, "[rad]")

    rospy.sleep(wait_for_homing)
    rospy.wait_for_service('gazebo/set_model_state')
    try:
        set_model_state = rospy.ServiceProxy('gazebo/set_model_state', SetModelState)
        gmsg = ModelState()
        gmsg.model_name = 'kangaroo'
        gmsg.pose.position.x = position[0]
        gmsg.pose.position.y = position[1]
        gmsg.pose.position.z = position[2]
        gmsg.pose.orientation.x = quat[0]
        gmsg.pose.orientation.y = quat[1]
        gmsg.pose.orientation.z = quat[2]
        gmsg.pose.orientation.w = quat[3]
        resp1 = set_model_state(gmsg)
        if not resp1:
            print(resp1.status_message)
    except rospy.ServiceException as e:
        print("Service call failed: %s" % e)
    print("called set_model_state service")
    exit()


if __name__ == '__main__':
    try:
        homing()
    except rospy.ROSInterruptException:
        pass